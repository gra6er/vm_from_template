- name:  Clone a virtual machine from template and customize
  vmware_guest:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ datacenter }}"
    state: present
    folder: "{{ folder }}"
    template: "{{ template }}"
    name: "{{ item.name }}"
    cluster: "{{ cluster }}"
    resource_pool: "{{ resource_pool }}"
    disk:
    - size_gb: "{{ disk_gb }}"
      type: thin
      datastore: "{{ datastore }}"
    hardware:
      memory_mb: "{{ memory_mb }}"
      num_cpus: "{{ num_cpus }}"
      scsi: paravirtual
  delegate_to: localhost
  loop: "{{ vms }}"

- name: Add tags to a virtual machine
  community.vmware.vmware_tag_manager:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    tag_names: '{{ tags }}'
    object_name: '{{ item.name  }}'
    object_type: VirtualMachine
    state: add
  delegate_to: localhost
  loop: "{{ vms }}"

- name: Set the state of a virtual machine to poweron
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    folder: "{{ folder }}"
    name: "{{ item.name }}"
    state: powered-on
  delegate_to: localhost
  register: deploy
  loop: "{{ vms }}"


- name: Sleep for 30 sec
  wait_for:
    timeout: 30
  delegate_to: localhost


- name: Delete existed template eth interface
  community.vmware.vmware_vm_shell:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ datacenter }}"
    folder: "{{ folder }}"
    vm_id: "{{ item.name }}"
    vm_username: "{{ template_user }}"
    vm_password: "{{ template_passwd }}"
    vm_shell: /usr/bin/nmcli
    vm_shell_args: con delete ens192
  delegate_to: localhost
  register: shell_command_output
  loop: "{{ vms }}"

- name: Add new vm eth interface
  community.vmware.vmware_vm_shell:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ datacenter }}"
    folder: "{{ folder }}"
    vm_id: "{{ item.name }}"
    vm_username: "{{ template_user }}"
    vm_password: "{{ template_passwd }}"
    vm_shell: /usr/bin/nmcli
    vm_shell_args: >
      con add con-name ens192 
      type ethernet 
      ifname ens192
      ipv4.method manual
      ipv4.address {{ item.ip }}/24
      ipv4.gateway {{ gateway }}
      ipv4.dns {{ dns }}
  delegate_to: localhost
  register: shell_command_output
  loop: "{{ vms }}"

- name: Up new vm eth interface
  community.vmware.vmware_vm_shell:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ datacenter }}"
    folder: "{{ folder }}"
    vm_id: "{{ item.name }}"
    vm_username: "{{ template_user }}"
    vm_password: "{{ template_passwd }}"
    vm_shell: /usr/bin/nmcli
    vm_shell_args: 'con up ens192'
  delegate_to: localhost
  register: shell_command_output
  loop: "{{ vms }}"

- name: Set hostname
  community.vmware.vmware_vm_shell:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ datacenter }}"
    folder: "{{ folder }}"
    vm_id: "{{ item.name }}"
    vm_username: "{{ template_user }}"
    vm_password: "{{ template_passwd }}"
    vm_shell: /usr/bin/nmcli
    vm_shell_args: 'g hostname {{ item.name }}.icore.lab'
  delegate_to: localhost
  register: shell_command_output
  loop: "{{ vms }}"

- name: Restart systemd-hostnamed
  community.vmware.vmware_vm_shell:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    validate_certs: no
    datacenter: "{{ datacenter }}"
    folder: "{{ folder }}"
    vm_id: "{{ item.name }}"
    vm_username: "{{ template_user }}"
    vm_password: "{{ template_passwd }}"
    vm_shell: /usr/bin/systemctl
    vm_shell_args: 'restart systemd-hostnamed'
  delegate_to: localhost
  register: shell_command_output
  loop: "{{ vms }}"

# - name: Update www host with new addresses
#   community.windows.win_dns_record:
#     name: "{{ item.name }}"
#     type: "A"
#     zone: "localds.lab"
#     value:
#       - "{{ item.ip }}"
#   loop: "{{ vms }}"
#   delegate_to: win_dns